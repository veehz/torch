// This file is generated by scripts/generate_script.py from src/operations/ops.ts.j2
import { Tensor } from '../tensor';
import {
  _broadcast_shape,
  _get_original_index_from_transposed_index,
  _get_original_index_kernel,
  _pad_shape
} from '../broadcasting';
import gpu, { Texture } from '../gpu';
import { Operation, BinaryOperation, UnaryOperation } from './base';
import * as functional from './functional';
import { registerOperation } from './registry';

// binary pointwise

const _add_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return a[a_index] + b[b_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _add_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _add_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Add", "add", backward_operations)
export class Add extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _add_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz);
    b.backward(dz);
  }
}
registerOperation('add', Add);

const _sub_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return a[a_index] - b[b_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _sub_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _sub_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Sub", "sub", backward_operations)
export class Sub extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _sub_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz);
    b.backward(dz.mul(new Tensor(-1)));
  }
}
registerOperation('sub', Sub);

const _mul_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return a[a_index] * b[b_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _mul_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _mul_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Mul", "mul", backward_operations)
export class Mul extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _mul_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz.mul(b));
    b.backward(dz.mul(a));
  }
}
registerOperation('mul', Mul);

const _div_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return a[a_index] / b[b_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _div_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _div_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Div", "div", backward_operations)
export class Div extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _div_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz.div(b));
    b.backward(dz.mul(a).mul(new Tensor(-1)).div(b).div(b));
  }
}
registerOperation('div', Div);

const _pow_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return Math.pow(a[a_index], b[b_index]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _pow_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _pow_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Pow", "pow", backward_operations)
export class Pow extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _pow_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz.mul(b).mul(a.pow(b.sub(new Tensor(1)))));
    b.backward(dz.mul(a.pow(b)).mul(a.log()));
  }
}
registerOperation('pow', Pow);

const _fmod_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return a[a_index] % b[b_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _fmod_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _fmod_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Fmod", "fmod", backward_operations)
export class Fmod extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _fmod_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    a.backward(dz);
  }
}
registerOperation('fmod', Fmod);

function _powint_kernel_function(a: number[], n: number) {
  return Math.pow(a[this.thread.x], n);
}

const _powint_kernel = gpu.createKernel(
  _powint_kernel_function,
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _powint_tensor(a: Tensor, n: number, operation: Operation | null = null): Tensor {
  const kernel = _powint_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, n) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}

export class PowInt extends Operation {
  private cache: [Tensor, number];
  public forward(a: Tensor, n: number): Tensor {
    if (a.requires_grad) {
      this.cache = [a, n];
    }

    return _powint_tensor(a, n, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, n] = this.cache;

    // backward_operations:
    a.backward(dz.mul(n).mul(a.pow(n - 1)));
  }
}
registerOperation('powint', PowInt);

// unary pointwise

// function generated from unary_op_base("log", "Math.log(a[this.thread.x])")

const _log_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.log(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _log_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _log_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Log", "log", backward_operations)
export class Log extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _log_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(new Tensor(1).div(a));
  }
}
registerOperation('log', Log);

// function generated from unary_op_base("sqrt", "Math.sqrt(a[this.thread.x])")

const _sqrt_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.sqrt(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _sqrt_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _sqrt_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Sqrt", "sqrt", backward_operations)
export class Sqrt extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _sqrt_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(new Tensor(1).div(a.sqrt()).div(2));
  }
}
registerOperation('sqrt', Sqrt);

// function generated from unary_op_base("exp", "Math.exp(a[this.thread.x])")

const _exp_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.exp(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _exp_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _exp_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Exp", "exp", backward_operations)
export class Exp extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _exp_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(a.exp()));
  }
}
registerOperation('exp', Exp);

// function generated from unary_op_base("abs", "Math.abs(a[this.thread.x])")

const _abs_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.abs(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _abs_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _abs_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Abs", "abs", backward_operations)
export class Abs extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _abs_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(functional.sign(a)));
  }
}
registerOperation('abs', Abs);

// function generated from unary_op_base("sign", "Math.sign(a[this.thread.x])")

const _sign_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.sign(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _sign_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _sign_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Sign", "sign", backward_operations)
export class Sign extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _sign_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('sign', Sign);

// function generated from unary_op_base("neg", "Math.sign(a[this.thread.x]) * a[this.thread.x]")

const _neg_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.sign(a[this.thread.x]) * a[this.thread.x];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _neg_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _neg_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Neg", "neg", backward_operations)
export class Neg extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _neg_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(new Tensor(-1)));
  }
}
registerOperation('neg', Neg);

// function generated from unary_op_base("reciprocal", "1 / a[this.thread.x]")

const _reciprocal_kernel = gpu.createKernel(
  function (a: number[]) {
    return 1 / a[this.thread.x];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _reciprocal_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _reciprocal_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Reciprocal", "reciprocal", backward_operations)
export class Reciprocal extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _reciprocal_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(a.pow(-2)));
  }
}
registerOperation('reciprocal', Reciprocal);

// trigonometric

// function generated from unary_op_base("sin", "Math.sin(a[this.thread.x])")

const _sin_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.sin(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _sin_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _sin_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Sin", "sin", backward_operations)
export class Sin extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _sin_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(a.cos()));
  }
}
registerOperation('sin', Sin);

// function generated from unary_op_base("cos", "Math.cos(a[this.thread.x])")

const _cos_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.cos(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _cos_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _cos_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Cos", "cos", backward_operations)
export class Cos extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _cos_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(a.sin().neg()));
  }
}
registerOperation('cos', Cos);

// function generated from unary_op_base("tan", "Math.tan(a[this.thread.x])")

const _tan_kernel = gpu.createKernel(
  function (a: number[]) {
    return Math.tan(a[this.thread.x]);
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _tan_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  const kernel = _tan_kernel;
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: a.shape }
  );
}
// class generated from unary_op_class("Tan", "tan", backward_operations)
export class Tan extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _tan_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    a.backward(dz.mul(a.cos().pow(-2)));
  }
}
registerOperation('tan', Tan);

// reduction

function _sum_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  return new Tensor(
    a.toArray().reduce((acc, val) => acc + val, 0),
    { requires_grad: a.requires_grad },
    { operation: operation }
  );
}

// class generated from unary_op_class("Sum", "sum", backward_operations)
export class Sum extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _sum_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    const result = new Tensor(Array(a.dataLength()).fill(dz.item()));
    a.backward(result);
  }
}
registerOperation('sum', Sum);

function _mean_tensor(a: Tensor, operation: Operation | null = null): Tensor {
  return new Tensor(
    a.toArray().reduce((acc, val) => acc + val, 0) / a.dataLength(),
    { requires_grad: a.requires_grad },
    { operation: operation }
  );
}

// class generated from unary_op_class("Mean", "mean", backward_operations)
export class Mean extends UnaryOperation {
  private cache: [Tensor];
  public forward(a: Tensor): Tensor {
    if (a.requires_grad) {
      this.cache = [a];
    }
    return _mean_tensor(a, a.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a] = this.cache;

    // backward_operations:
    const result = new Tensor(Array(a.dataLength()).fill(dz.item() / a.dataLength()));
    a.backward(result);
  }
}
registerOperation('mean', Mean);

// linalg

const _transpose_kernel = gpu.createKernel(
  function (a: number[], as: number[], dim0: number, dim1: number) {
    const a_index = _get_original_index_from_transposed_index(as, dim0, dim1, this.thread.x);
    return a[a_index];
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _transpose_tensor(
  a: Tensor,
  dim0: number,
  dim1: number,
  operation: Operation | null = null
): Tensor {
  const kernel = _transpose_kernel;
  kernel.setConstants({
    shape_length: a.shape.length
  });
  kernel.setOutput([a.shape.reduce((acc, val) => acc * val, 1)]);

  const swapped_shape = [...a.shape];
  [swapped_shape[dim0], swapped_shape[dim1]] = [swapped_shape[dim1], swapped_shape[dim0]];

  return new Tensor(
    kernel(a.data, a.shape, dim0, dim1) as number[],
    { requires_grad: a.requires_grad },
    { operation: operation, shape: swapped_shape }
  );
}

export class Transpose extends Operation {
  cache: [Tensor, number, number];
  forward(a: Tensor, dim0: number, dim1: number): Tensor {
    this.cache = [a, dim0, dim1];
    return _transpose_tensor(a, dim0, dim1, this);
  }
  backward(dz: Tensor): void {
    const [a, dim0, dim1] = this.cache;

    // backward_operations:
    a.backward(dz.transpose(dim0, dim1));
  }
}
registerOperation('transpose', Transpose);

function _matmul_kernel_function(
  a: number[],
  as: number[],
  b: number[],
  bs: number[],
  bcs: number[]
) {
  let a_index = _get_original_index_kernel(as, bcs, this.thread.x);
  let b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

  const l = this.constants.shape_length;

  const tmp1 = bcs[l] * bcs[l + 1];
  const position = this.thread.x % tmp1;

  a_index = a_index * as[l] * as[l + 1] + Math.floor(position / bcs[l + 1]) * as[l + 1];
  b_index = b_index * bs[l] * bs[l + 1] + (position % bcs[l + 1]);

  const b_stride = bs[l + 1];

  let sum = 0;
  for (let i = 0; i < this.constants.lp; i++) {
    sum = sum + a[a_index] * b[b_index];
    a_index = a_index + 1;
    b_index = b_index + b_stride;
  }

  return sum;
}

const _matmul_kernel = gpu.createKernel(_matmul_kernel_function,
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _matmul_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  if (a.shape.length == 1 && b.shape.length == 1) {
    return a.mul(b).sum();
  }

  const a_1d = a.shape.length == 1;
  const b_1d = b.shape.length == 1;

  const a_shape = a_1d ? [1, a.shape[0]] : a.shape;
  const b_shape = b_1d ? [b.shape[0], 1] : b.shape;

  if (a_shape[a_shape.length - 1] != b_shape[b_shape.length - 2]) {
    // TODO: check what error pytorch throws
    throw new Error('Shape mismatch: ' + a.shape + ' and ' + b.shape);
  }

  const loop_iterations = a_shape[a_shape.length - 1];

  if (loop_iterations > 1000) {
    // TODO: can try fixing with maxLoopIterations by gpu.js
    throw new Error('Loop iterations too large: ' + loop_iterations);
  }

  const broadcast_shape = _broadcast_shape(a_shape.slice(0, -2), b_shape.slice(0, -2)).concat([
    a_shape[a_shape.length - 2],
    b_shape[b_shape.length - 1]
  ]);

  const padded_a_shape = _pad_shape(a_shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b_shape, broadcast_shape);

  const kernel = _matmul_kernel;
  kernel.setConstants({
    lp: loop_iterations,
    // assumes that _get_original_index_kernel reads from the front
    shape_length: broadcast_shape.length - 2
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  let shape_after_removing_extra_dims = [...broadcast_shape];

  if (a_1d) {
    shape_after_removing_extra_dims = shape_after_removing_extra_dims
      .slice(0, -2)
      .concat([broadcast_shape[broadcast_shape.length - 1]]);
  }

  if (b_1d) {
    shape_after_removing_extra_dims = shape_after_removing_extra_dims.slice(0, -1);
  }

  return new Tensor(
    kernel(
      a.data,
      padded_a_shape,
      b.data,
      padded_b_shape,
      broadcast_shape
    ) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: shape_after_removing_extra_dims }
  );
}

// class generated from binary_op_class("Matmul", "matmul", backward_operations)
export class Matmul extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _matmul_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('matmul', Matmul);

// comparison

const _lt_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] < b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _lt_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _lt_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Lt", "lt", backward_operations)
export class Lt extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _lt_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('lt', Lt);

const _gt_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] > b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _gt_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _gt_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Gt", "gt", backward_operations)
export class Gt extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _gt_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('gt', Gt);

const _le_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] <= b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _le_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _le_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Le", "le", backward_operations)
export class Le extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _le_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('le', Le);

const _ge_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] >= b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _ge_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _ge_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Ge", "ge", backward_operations)
export class Ge extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _ge_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('ge', Ge);

const _eq_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] == b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _eq_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _eq_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Eq", "eq", backward_operations)
export class Eq extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _eq_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('eq', Eq);

const _ne_kernel = gpu.createKernel(
  function (a: number[], as: number[], b: number[], bs: number[], bcs: number[]) {
    const a_index = _get_original_index_kernel(as, bcs, this.thread.x);
    const b_index = _get_original_index_kernel(bs, bcs, this.thread.x);

    return (a[a_index] != b[b_index]) ? 1 : 0;
  },
  {
    dynamicOutput: true,
    dynamicArguments: true,
    // pipeline: true,
    // immutable: true
  }
);

function _ne_tensor(a: Tensor, b: Tensor, operation: Operation | null = null): Tensor {
  const broadcast_shape = _broadcast_shape(a.shape, b.shape);
  const padded_a_shape = _pad_shape(a.shape, broadcast_shape);
  const padded_b_shape = _pad_shape(b.shape, broadcast_shape);

  const kernel = _ne_kernel;
  kernel.setConstants({
    shape_length: broadcast_shape.length
  });
  kernel.setOutput([broadcast_shape.reduce((acc, val) => acc * val, 1)]);

  return new Tensor(
    kernel(a.data, padded_a_shape, b.data, padded_b_shape, broadcast_shape) as number[],
    { requires_grad: a.requires_grad || b.requires_grad },
    { operation: operation, shape: broadcast_shape }
  );
}
// class generated from binary_op_class("Ne", "ne", backward_operations)
export class Ne extends BinaryOperation {
  private cache: [Tensor, Tensor];
  public forward(a: Tensor, b: Tensor): Tensor {
    if (a.requires_grad || b.requires_grad) {
      this.cache = [a, b];
    }
    return _ne_tensor(a, b, a.requires_grad || b.requires_grad ? this : null);
  }
  public backward(dz: Tensor): void {
    const [a, b] = this.cache;

    // backward_operations:
    
  }
}
registerOperation('ne', Ne);