import os
import jinja2
from pathlib import Path

def find_template_files(root_dir):
    """Find all .ts.j2 files in the project"""
    template_files = []
    for root, dirs, files in os.walk(root_dir):
        for file in files:
            if file.endswith('.ts.j2'):
                template_files.append(os.path.join(root, file))
    return template_files

def compile_template(template_path, output_path, env):
    """Compile a single template file to .gen.ts"""
    try:
        # Get relative path for template loading
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        rel_path = os.path.relpath(template_path, project_root)
        
        # Use the FileSystemLoader to load the template
        template = env.get_template(rel_path)
        
        # Render the template
        output = template.render({})

        output = f"// This file is generated by scripts/generate_script.py from {rel_path}\n" + output
        
        # Write to .gen.ts file
        with open(output_path, 'w') as f:
            f.write(output)
        
        print(f"Generated: {output_path}")
        return True
    except Exception as e:
        print(f"Error compiling {template_path}: {e}")
        return False

def main():
    # Setup Jinja2 environment - point to project root so it can find both src and scripts
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(project_root),
        trim_blocks=True,
        lstrip_blocks=True
    )
    
    # Find all template files
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    template_files = find_template_files(project_root)
    
    if not template_files:
        print("No .ts.j2 files found")
        return
    
    print(f"Found {len(template_files)} template files:")
    for template_file in template_files:
        print(f"  - {template_file}")
    
    # Compile each template
    success_count = 0
    for template_file in template_files:
        # Generate output filename
        output_file = template_file.replace('.ts.j2', '.gen.ts')
        
        if compile_template(template_file, output_file, env):
            success_count += 1
    
    print(f"\nCompilation complete: {success_count}/{len(template_files)} files generated successfully")

if __name__ == "__main__":
    main()